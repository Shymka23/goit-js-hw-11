{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Імпорт бібліотек та їх стилів\nimport flatpickr from 'flatpickr'; // Бібліотека для вибору дати/часу\nimport 'flatpickr/dist/flatpickr.min.css'; // Стилі для flatpickr\nimport iziToast from 'izitoast'; // Бібліотека для сповіщень\nimport 'izitoast/dist/css/iziToast.min.css'; // Стилі для сповіщень\n\n// Отримання елементів DOM\nconst datetimePicker = document.querySelector('#datetime-picker'); // Поле вибору дати\nconst startButton = document.querySelector('[data-start]'); // Кнопка старту\nconst daysValue = document.querySelector('[data-days]'); // Елемент для днів\nconst hoursValue = document.querySelector('[data-hours]'); // Елемент для годин\nconst minutesValue = document.querySelector('[data-minutes]'); // Елемент для хвилин\nconst secondsValue = document.querySelector('[data-seconds]'); // Елемент для секунд\n\n// Глобальні змінні\nlet userSelectedDate; // Зберігає обрану користувачем дату\nlet countdownInterval; // Інтервал для зворотнього відліку\n\n// Налаштування для flatpickr\nconst options = {\n  enableTime: true, // Дозволити вибір часу\n  time_24hr: true, // 24-годинний формат часу\n  defaultDate: new Date(), // Поточна дата за замовчуванням\n  minuteIncrement: 1, // Крок хвилин\n  onClose(selectedDates) {\n    // Функція, яка викликається при закритті календаря\n    userSelectedDate = selectedDates[0]; // Зберігаємо обрану дату\n    const currentDate = new Date(); // Поточна дата\n\n    // Перевіряємо, чи обрана дата в майбутньому\n    if (userSelectedDate <= currentDate) {\n      // Якщо дата в минулому - показуємо помилку\n      iziToast.error({\n        title: 'Помилка',\n        message: 'Будь ласка, оберіть дату у майбутньому',\n        position: 'topRight',\n      });\n      startButton.disabled = true; // Блокуємо кнопку старту\n    } else {\n      startButton.disabled = false; // Розблоковуємо кнопку старту\n    }\n  },\n};\n\n// Ініціалізація flatpickr\nflatpickr(datetimePicker, options);\n\n// Обробник кліку на кнопку старту\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true; // Блокуємо кнопку старту\n  datetimePicker.disabled = true; // Блокуємо поле вибору дати\n\n  // Запускаємо інтервал зворотнього відліку (кожну секунду)\n  countdownInterval = setInterval(() => {\n    const currentDate = new Date(); // Поточна дата\n    const timeDifference = userSelectedDate - currentDate; // Різниця часу в мілісекундах\n\n    // Якщо час вийшов\n    if (timeDifference <= 0) {\n      clearInterval(countdownInterval); // Зупиняємо інтервал\n      updateTimerDisplay(0, 0, 0, 0); // Оновлюємо таймер на нулі\n      datetimePicker.disabled = false; // Розблоковуємо поле вибору дати\n      return;\n    }\n\n    // Конвертуємо мілісекунди в дні, години, хвилини, секунди\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n    // Оновлюємо відображення таймера\n    updateTimerDisplay(days, hours, minutes, seconds);\n  }, 1000); // Оновлення кожну секунду\n});\n\n// Функція для конвертації мілісекунд у дні, години, хвилини, секунди\nfunction convertMs(ms) {\n  // Константи для переведення мілісекунд\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Розрахунки\n  const days = Math.floor(ms / day); // Дні\n  const hours = Math.floor((ms % day) / hour); // Години\n  const minutes = Math.floor(((ms % day) % hour) / minute); // Хвилини\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second); // Секунди\n\n  return { days, hours, minutes, seconds };\n}\n\n// Функція для додавання ведучого нуля (наприклад, 5 -> \"05\")\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n// Функція для оновлення відображення таймера\nfunction updateTimerDisplay(days, hours, minutes, seconds) {\n  daysValue.textContent = addLeadingZero(days); // Оновлюємо дні\n  hoursValue.textContent = addLeadingZero(hours); // Оновлюємо години\n  minutesValue.textContent = addLeadingZero(minutes); // Оновлюємо хвилини\n  secondsValue.textContent = addLeadingZero(seconds); // Оновлюємо секунди\n}\n"],"names":["datetimePicker","startButton","daysValue","hoursValue","minutesValue","secondsValue","userSelectedDate","countdownInterval","options","selectedDates","iziToast","flatpickr","timeDifference","updateTimerDisplay","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"+IAOA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAG5D,IAAIC,EACAC,EAGJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErBH,EAAmBG,EAAc,CAAC,EAI9BH,GAHgB,IAAI,MAKtBI,EAAS,MAAM,CACb,MAAO,UACP,QAAS,yCACT,SAAU,UAClB,CAAO,EACDT,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAGAU,EAAUX,EAAgBQ,CAAO,EAGjCP,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAG1BO,EAAoB,YAAY,IAAM,CAEpC,MAAMK,EAAiBN,EADH,IAAI,KAIxB,GAAIM,GAAkB,EAAG,CACvB,cAAcL,CAAiB,EAC/BM,EAAmB,EAAG,EAAG,EAAG,CAAC,EAC7Bb,EAAe,SAAW,GAC1B,MACD,CAGD,KAAM,CAAE,KAAAc,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAc,EAElEC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CACjD,EAAE,GAAI,CACT,CAAC,EAGD,SAASC,EAAUC,EAAI,CAQrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,SAASG,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAGA,SAASR,EAAmBC,EAAMC,EAAOC,EAASC,EAAS,CACzDf,EAAU,YAAckB,EAAeN,CAAI,EAC3CX,EAAW,YAAciB,EAAeL,CAAK,EAC7CX,EAAa,YAAcgB,EAAeJ,CAAO,EACjDX,EAAa,YAAce,EAAeH,CAAO,CACnD"}